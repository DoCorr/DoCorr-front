# This is sample SDL schema for GraphQL Faker.
#
# There are two directives you can use to enhance fake data:
#   - @fake
#   - @examples
# Each directive has autocompletion working so start by typing @
#
# Press save or Cmd+Enter to apply the changes and update server. Switch to GraphiQL
# on the left panel to immediately test your changes.
# This tool also supports extending existing APIs. Check graphql-faker --help
#
# Developed with ❤️ by APIs.guru | https://github.com/APIs-guru/graphql-faker
#
# 문서
# 유저
# 첨삭영역
# 첨삭 영역 코멘트

scalar LocalDateTime

scalar Long

type User {
  id: ID
  name: String @fake(type: fullName)
  email: String @fake(type: email)
  profile_image: String @fake(type: imageUrl)
  password: String @fake(type: password)
  create_date: String @fake(type: recentDate)
}

type Document {
  id: ID
  title: String @fake(type: words)
  view_count: Long @fake(type: number)
}

type SteppedDocument {
  id: ID
  doc_id: ID
  contents: String @fake(type: lorem)
  create_date: String @fake(type: recentDate)
  update_date: String @fake(type: recentDate)
}

type CorrectionArea {
  id: ID!
  user_id: ID
  stepped_doc_id: ID
  corr_area_code: String @fake(type: password)
}

type Correction {
  id: ID!
  user_id: ID
  corr_area_id: ID
  corr_sentence: String @fake(type: lorem)
  create_date: String @fake(type: recentDate)
  update_date: String @fake(type: recentDate)
  like_count: Long @fake(type: number)
  dislike_count: Long @fake(type: number)
}

type CorrectionReply {
  id: ID!
  user_id: ID
  corr_id: ID
  is_deleted: Boolean @examples(values: [false, false, true, false])
  contents: String @fake(type: lorem)
  create_date: String @fake(type: recentDate)
  update_date: String @fake(type: recentDate)
  like_count: Long @fake(type: number)
  dislike_count: Long @fake(type: number)
}







# type Company {
#   id: ID
#   name: String @fake(type:companyName)
#   industry: String @examples(values: ["IT", "Manufacturing", "Medicine", "Media"])
#   employees: [Employee!] @listLength(min: 5, max: 10)
# }

# type Employee {
#   id: ID
#   firstName: String @fake(type: firstName, locale:en_CA)
#   lastName: String @fake(type: lastName, locale:en_CA)
#   address: String @fake(type:streetAddress, options: { useFullAddress: true })
#   subordinates: [Employee!] @listLength(min: 0, max: 3)
#   company: Company
# }

type Query {
  # employee(id: ID): Employee
  # company(id: ID): Company
  # allCompanies: [Company!]
  user(id: ID): User
  allUsers: [User!] @listLength(min: 2, max: 20)
  allDocument: [Document!] @listLength(min: 50, max: 200)
}
